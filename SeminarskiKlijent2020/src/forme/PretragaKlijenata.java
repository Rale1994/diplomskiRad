/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Advokat;
import domen.Klijent;
import domen.OpstiDomenskiObjkat;
import domen.Sudjenje;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logika.KontrolerKlijent;
import modeli.ModelTabeleKlijenti;

/**
 *
 * @author Rados
 */
public class PretragaKlijenata extends javax.swing.JFrame {

    private Advokat advokat;

    /**
     * Creates new form PretragaKlijenata
     */
    public PretragaKlijenata(Advokat advokat) throws Exception {
        initComponents();
        this.advokat = advokat;
        //lblUlogovani.setText("Advokat koji je trenutno ulogovan: " + advokat.getIme() + " " + advokat.getPrezime());
        podesiTabelu();
    }

    private PretragaKlijenata() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtPretraga = new javax.swing.JTextField();
        btnPretrazi = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKlijenti = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnOdustani = new javax.swing.JButton();
        btnDodajSudjenje = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pretraga klijenata ");

        jLabel1.setText("Unesi kriterijum pretrage klijenata(ime/  prezime/ JMBG):");

        btnPretrazi.setText("Pretraži");
        btnPretrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPretraziActionPerformed(evt);
            }
        });

        jButton2.setText("Poništi");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tblKlijenti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblKlijenti);

        jButton1.setText("Izmeni podatke");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnOdustani.setText("Odustani");
        btnOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdustaniActionPerformed(evt);
            }
        });

        btnDodajSudjenje.setText("Dodaj suđenje");
        btnDodajSudjenje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajSudjenjeActionPerformed(evt);
            }
        });

        jButton3.setText("Prikaži sva sudjenja klijenta");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnOdustani, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 857, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnPretrazi)
                                    .addGap(32, 32, 32)
                                    .addComponent(jButton2)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78)
                                .addComponent(btnDodajSudjenje, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)
                                .addComponent(jButton3)))
                        .addGap(0, 38, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPretrazi)
                        .addComponent(jButton2)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnDodajSudjenje, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47)
                .addComponent(btnOdustani, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        setSize(new java.awt.Dimension(931, 443));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPretraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPretraziActionPerformed
        try {
            String pretraga = txtPretraga.getText();
            if (txtPretraga.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Morate uneti neki kriterijum pretrage!", "Pretraga", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            ArrayList<Klijent> lista = KontrolerKlijent.getInstanca().listaZaPretragu(pretraga);
            if (lista.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da nađe klijenta po zadatoj vrednosti.", "Greška", JOptionPane.ERROR_MESSAGE);
                return;
            }
            JOptionPane.showMessageDialog(this, "Sistem je našao klijenta/e.", "Pretraga", JOptionPane.INFORMATION_MESSAGE);
            ModelTabeleKlijenti mtk = new ModelTabeleKlijenti(lista);
            tblKlijenti.setModel(mtk);
        } catch (Exception ex) {
            Logger.getLogger(PretragaKlijenata.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnPretraziActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            podesiTabelu();
            txtPretraga.setText("");
        } catch (Exception ex) {
            Logger.getLogger(PretragaKlijenata.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ModelTabeleKlijenti mtk = (ModelTabeleKlijenti) tblKlijenti.getModel();
        int red = tblKlijenti.getSelectedRow();
        if (red != -1) {
            try {
                ArrayList<Klijent> lista = mtk.getListaKlijenata();
                Klijent k = lista.get(red);
                if (k.getAdvokat().getAdvokatID()!=advokat.getAdvokatID()) {
                    JOptionPane.showMessageDialog(this, "Podatke o ovom klijentu može da menja advokat koji zastupa ovog klijenta.", "Greška", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                IzmenaPodatakaOKlijentu izmena = new IzmenaPodatakaOKlijentu(this, k, advokat, true);
                izmena.setKlijent(k);
                izmena.setAdvokat(advokat);

                JOptionPane.showMessageDialog(this, "Sistem je prikazao podatke o klijentu.", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                izmena.setVisible(true);
                izmena.pack();
            } catch (Exception ex) {
                Logger.getLogger(PretragaKlijenata.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Morate izabrati klijenta", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdustaniActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnOdustaniActionPerformed

    private void btnDodajSudjenjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajSudjenjeActionPerformed
        ModelTabeleKlijenti mtk = (ModelTabeleKlijenti) tblKlijenti.getModel();
        int red = tblKlijenti.getSelectedRow();
        if (red != -1) {

            try {
                ArrayList<Klijent> lista = mtk.getListaKlijenata();
                Klijent k = lista.get(red);

                UnosNovogSudjenja uns = new UnosNovogSudjenja(this, k, true);
                uns.setKlijent(k);
                JOptionPane.showMessageDialog(this, "Sistem je kreirao formu za unos novog suđenja.", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                uns.setVisible(true);
                uns.pack();
            } catch (Exception ex) {
                Logger.getLogger(PretragaKlijenata.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Sistem ne može da učita formu za unos novog suđenja.", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_btnDodajSudjenjeActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ModelTabeleKlijenti mtk = (ModelTabeleKlijenti) tblKlijenti.getModel();
        int red = tblKlijenti.getSelectedRow();
        if (red != -1) {

            try {
                ArrayList<Klijent> lista = mtk.getListaKlijenata();
                Klijent k = lista.get(red);

                ArrayList<Sudjenje> listaSudjenja = KontrolerKlijent.getInstanca().vratiSudnjenja(k);
                if (listaSudjenja.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Sistem ne može da nađe suđenja za izabranog klijenta.", "Greška", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                PrikazSvihSudjenja ps = new PrikazSvihSudjenja(this, listaSudjenja, k, true);
                ps.setListaSudjneja(listaSudjenja);
                JOptionPane.showMessageDialog(this, "Sistem je našao sva suđenja klijenta.", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                ps.setVisible(true);
                ps.pack();
            } catch (Exception ex) {
                Logger.getLogger(PretragaKlijenata.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Morate izabrati klijenta!", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PretragaKlijenata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PretragaKlijenata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PretragaKlijenata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PretragaKlijenata.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PretragaKlijenata().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(PretragaKlijenata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajSudjenje;
    private javax.swing.JButton btnOdustani;
    private javax.swing.JButton btnPretrazi;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblKlijenti;
    private javax.swing.JTextField txtPretraga;
    // End of variables declaration//GEN-END:variables

    private void podesiTabelu() throws Exception {
        ArrayList<Klijent> lisaKlijenata = KontrolerKlijent.getInstanca().sviKlijenti();
        ModelTabeleKlijenti mtk = new ModelTabeleKlijenti(lisaKlijenata);
        tblKlijenti.setModel(mtk);
    }

    public Advokat getAdvokat() {
        return advokat;
    }

    public void setAdvokat(Advokat advokat) {
        this.advokat = advokat;
    }
}
